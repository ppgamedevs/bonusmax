name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/web

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Enable corepack & pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.0.0 --activate || corepack prepare pnpm@8.15.8 --activate
          pnpm -v

      - name: Get pnpm store path
        id: pnpm-cache
        run: echo "dir=$(pnpm store path)" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install deps
        # still runs in apps/web due to defaults; pnpm will find the workspace root
        run: pnpm install --frozen-lockfile

      # ðŸ”§ PATCH BEFORE BUILD (note: root is src/app because of working-directory)
      - name: Patch Prisma pages/handlers to be dynamic (pwsh)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $Utf8NoBom = New-Object System.Text.UTF8Encoding($false)
          function Save-File([string]$Path,[string]$Text){ [IO.File]::WriteAllText($Path, ($Text -replace "`r`n","`n"), $Utf8NoBom) }

          $root = "src/app"
          $targets = Get-ChildItem -Path $root -Recurse -File | Where-Object { $_.Name -in @('page.tsx','route.ts','sitemap.ts') }

          foreach ($f in $targets) {
            $t = Get-Content -Raw -LiteralPath $f.FullName
            if ($f.FullName -match '[\\/](robots\.ts|manifest\.ts)$') { continue }
            if ($t -match '(?m)^\s*export\s+const\s+dynamic\s*=\s*["'']force-dynamic["'']\s*;') { continue }

            $usesDb =
              ($t -match '\bprisma\b') -or
              ($t -match 'from\s+["'']@prisma/client["'']') -or
              ($t -match 'packages/lib/db/client') -or
              ($t -match '@bonusmax/lib/prisma') -or
              ($f.FullName -match '[\\/](sitemap\.xml[\\/]|cauta[\\/])')

            if (-not $usesDb) { continue }

            if ($t -match '(?m)^\s*["'']use client["''];\s*\r?\n') {
              $t = $t -replace '(?m)^(\s*["'']use client["''];\s*\r?\n)', "`$1export const dynamic = `"force-dynamic`";`n"
            } else {
              $t = 'export const dynamic = "force-dynamic";' + "`n" + $t
            }
            Save-File $f.FullName $t
            Write-Host "Marked dynamic: $($f.FullName)"
          }

      - name: Configure Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      - name: Build & Export static site
        run: |
          pnpm build
          pnpm exec next export -o out

      - name: Write CNAME for custom domain
        run: echo "bonusmax.ro" > CNAME
        working-directory: apps/web/out

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/web/out

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Patch DB-using pages to force-dynamic (pwsh)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $utf8 = [System.Text.UTF8Encoding]::new($false)
          function Save([string]$p,[string]$s){[IO.File]::WriteAllText($p,($s -replace "`r`n","`n"),$utf8)}

          # IMPORTANT: adjust root to your job's working-directory.
          # If the job has defaults.run.working-directory: apps/web, use "src/app".
          $root = "src/app"

          $targets = Get-ChildItem -Path $root -Recurse -File |
            Where-Object { $_.Name -in @('page.tsx','route.ts','sitemap.ts') }

          $dyn = '(?m)^(?<indent>\s*)export\s+const\s+dynamic\s*=\s*["''].*?["'']\s*;?\s*$'
          foreach($f in $targets){
            $t = Get-Content -Raw -LiteralPath $f.FullName

            if ($f.FullName -match '[\\/](robots\.ts|manifest\.ts)$') { continue }

            $usesDb =
              ($t -match '\bprisma\b') -or
              ($t -match 'from\s+["'']@prisma/client["'']') -or
              ($t -match 'packages/lib/db/client') -or
              ($t -match '@bonusmax/lib/prisma') -or
              ($f.FullName -match '[\\/](sitemap\.xml[\\/]|cauta[\\/])')

            if (-not $usesDb) { continue }

            if ($t -match $dyn) {
              $t = [regex]::Replace($t, $dyn, '${indent}export const dynamic = "force-dynamic";')
            } else {
              if ($t -match '(?m)^\s*["'']use client["''];\s*\r?\n') {
                $t = $t -replace '(?m)^(\s*["'']use client["''];\s*\r?\n)', "`$1export const dynamic = `"force-dynamic`";`n"
              } else {
                $t = 'export const dynamic = "force-dynamic";' + "`n" + $t
              }
            }

            Save $f.FullName $t
            Write-Host "Normalized dynamic: $($f.FullName)"
          }
